import{_ as n,e as s}from"./app.fc2879aa.js";const a={},p=s(`<h1 id="\u671F\u7EA6\u4E0E\u5F02\u6B65\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#\u671F\u7EA6\u4E0E\u5F02\u6B65\u51FD\u6570" aria-hidden="true">#</a> \u671F\u7EA6\u4E0E\u5F02\u6B65\u51FD\u6570</h1><h2 id="\u5F02\u6B65\u7F16\u7A0B" tabindex="-1"><a class="header-anchor" href="#\u5F02\u6B65\u7F16\u7A0B" aria-hidden="true">#</a> \u5F02\u6B65\u7F16\u7A0B</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>success<span class="token punctuation">,</span>failure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token string">&#39;Must provide a number as first agrument&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>    
        <span class="token function">success</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">failure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">successCallFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Success: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">failureCallFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failure: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>successCallFunc<span class="token punctuation">,</span>failureCallFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Success: 6</span>
  <span class="token function">double</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>successCallFunc<span class="token punctuation">,</span>failureCallFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Failure: Must provide a number as first agrument</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>\u5982\u679C\u5F02\u6B65\u8FD4\u503C\u53C8\u4F9D\u8D56\u4E00\u4E2A\u5F02\u6B65\u8FD4\u56DE\u503C\uFF0C\u90A3\u4E48\u60C5\u51B5\u4F1A\u66F4\u52A0\u590D\u6742\uFF0C\u5728\u5B9E\u9645\u4EE3\u7801\u4E2D\u8981\u6C42\u5D4C\u5957\u56DE\u8C03</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>success<span class="token punctuation">,</span>failure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token string">&#39;Must provide a number as first agrument&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>    
        <span class="token function">success</span><span class="token punctuation">(</span>value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">failure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token function-variable function">successCallFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">double</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token parameter">y</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Success: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">failureCallFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Failure: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>successCallFunc<span class="token punctuation">,</span>failureCallFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token comment">// Success: 12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="promise\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#promise\u5BF9\u8C61" aria-hidden="true">#</a> Promise\u5BF9\u8C61</h2><h3 id="\u4ECB\u7ECD" tabindex="-1"><a class="header-anchor" href="#\u4ECB\u7ECD" aria-hidden="true">#</a> \u4ECB\u7ECD</h3><p>\u662F\u5F02\u6B65\u7F16\u7A0B\u7684\u4E00\u79CD\u89E3\u51B3\u65B9\u6848\uFF0C\u6BD4\u4F20\u7EDF\u65B9\u5F0F\u66F4\u597D\uFF01</p><blockquote><p>Promise\u5BF9\u8C61\u6709\u4E09\u79CD\u72B6\u6001</p></blockquote><ol><li>pending\u3010\u5F85\u5B9A\u3011\u521D\u59CB\u72B6\u6001\uFF08\u5B58\u5728\u65F6\u95F4\u5F88\u77ED\uFF09</li><li>fulfilled\u3010\u5B9E\u73B0\u3011\u64CD\u4F5C\u6210\u529F</li><li>rejected\u3010\u64CD\u4F5C\u3011\u64CD\u4F5C\u5931\u8D25</li></ol><h3 id="\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u73B0" aria-hidden="true">#</a> \u5B9E\u73B0</h3><p>\u5F53promise\u72B6\u6001\u53D1\u751F\u6539\u53D8\uFF0C\u5C31\u4F1A\u89E6\u53D1then()\u91CC\u7684\u54CD\u5E94\u51FD\u6570\u5904\u7406\u540E\u7EED\u6B65\u9AA4</p><blockquote><p>\u72B6\u6001\u6539\u53D8\u60C5\u51B5</p></blockquote><ul><li>\u4ECEpending\u53D8\u4E3Afulfilled</li><li>\u4ECEpending\u53D8\u4E3Arejected</li></ul><h4 id="\u57FA\u672C\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u57FA\u672C\u5B9E\u73B0" aria-hidden="true">#</a> \u57FA\u672C\u5B9E\u73B0</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;good&#39;</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// resolve(str);    // fulfilled\u72B6\u6001</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// rejected\u72B6\u6001</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 
                            Promise {&lt;pending&gt;}
                            __proto__: Promise
                            [[PromiseState]]: &quot;rejected&quot;
                            [[PromiseResult]]: &quot;good&quot; 
                         */</span>

    <span class="token comment">/* 
        then\u65B9\u6CD5\u53C2\u6570\uFF1A
            1. fulfilled\u65F6\uFF0C\u6267\u884C\u7B2C\u4E00\u4E2A\u56DE\u8C03\u51FD\u6570
            2. rejected\u65F6\uFF0C\u6267\u884C\u7B2C\u4E8C\u4E2A\u56DE\u8C03\u51FD\u6570
     */</span>
    pro<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token parameter">reason</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/* 
                                Promise {&lt;rejected&gt;: &quot;good&quot;}
                                __proto__: Promise
                                [[PromiseState]]: &quot;rejected&quot;
                                [[PromiseResult]]: &quot;good&quot;
                            */</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h4 id="then\u65B9\u6CD5\u7684\u56DE\u8C03\u51FD\u6570\u7684\u8FD4\u56DE\u503C" tabindex="-1"><a class="header-anchor" href="#then\u65B9\u6CD5\u7684\u56DE\u8C03\u51FD\u6570\u7684\u8FD4\u56DE\u503C" aria-hidden="true">#</a> then\u65B9\u6CD5\u7684\u56DE\u8C03\u51FD\u6570\u7684\u8FD4\u56DE\u503C</h4><ol><li>\u975E promise \u7C7B\u578B\u7684\u5C5E\u6027</li><li>==\u662F promise \u5BF9\u8C61==\uFF08\u94FE\u5F0F\u56DE\u8C03\uFF09</li><li>\u629B\u51FA\u9519\u8BEF</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6210\u529F\u4E86\uFF01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> res <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 1. \u975E promise \u7C7B\u578B\u7684\u5C5E\u6027</span>
    <span class="token comment">// return 123;</span>

    <span class="token comment">// 2. \u662F promise \u5BF9\u8C61</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. \u629B\u51FA\u9519\u8BEF</span>
    <span class="token comment">// throw &#39;\u51FA\u9519\u4E86&#39;;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u94FE\u5F0F\u56DE\u8C03</span>
<span class="token comment">// res.then(value =&gt; {</span>

<span class="token comment">// }).then(value =&gt; {</span>

<span class="token comment">// })</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="promise\u5B9E\u73B0\u540C\u6B65\u8BF7\u6C42\u4E24\u6BB5\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#promise\u5B9E\u73B0\u540C\u6B65\u8BF7\u6C42\u4E24\u6BB5\u6570\u636E" aria-hidden="true">#</a> Promise\u5B9E\u73B0\u540C\u6B65\u8BF7\u6C42\u4E24\u6BB5\u6570\u636E</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">firstAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6211\u662F\u7B2C\u4E00\u6BB5\u6570\u636E&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">secondAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;\u6211\u662F\u7B2C\u4E8C\u6BB5\u6570\u636E&#39;</span><span class="token punctuation">)</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u7B2C\u4E8C\u6BB5\u6570\u636E\u8BF7\u6C42\u56DE\u6765\u4E86\uFF01\uFF01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token function">firstAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u7B2C\u4E00\u6BB5\u6570\u636E</span>

    <span class="token comment">/* 
        \u4E0B\u9762\u4E24\u6BB5\u4EE3\u7801\u6709\u672C\u8D28\u533A\u522B
        1. \u76F4\u63A5\u8FD4\u56DE\u7ED9\u6211\u4E00\u4E2APromise\u5BF9\u8C61
        2. \u5C06secondAjax\u65B9\u6CD5\u8FD4\u56DE\u7ED9\u6211\u7684\u5BF9\u8C61\u518D\u6B21\u8FD4\u56DE
            \u7B2C\u4E8C\u79CD\u4EE3\u7801\u662F\u7B49\u540C\u4E8E\u7B2C\u4E09\u79CD\u4EE3\u7801\u7684

        \u6240\u4EE5\u7B2C\u4E8C\u79CD\u4E0E\u7B2C\u4E09\u79CD\u4EE3\u7801\u624D\u5B9E\u73B0\u4E86\u540C\u6B65\u8BF7\u6C42\u4E24\u6BB5\u6570\u636E\uFF08\u7B2C\u4E8C\u79CD\u548C\u7B2C\u4E09\u79CD\u4E00\u6837\u7684\uFF09
    */</span>
    <span class="token comment">// \u7B2C\u4E00\u79CD</span>
    <span class="token comment">// secondAjax();</span>
    <span class="token comment">// \u7B2C\u4E8C\u79CD</span>
    <span class="token keyword">return</span> <span class="token function">secondAjax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     
    <span class="token comment">// \u7B2C\u4E09\u79CD</span>
    <span class="token comment">// return new Promise((resolve,reject) =&gt; {</span>
    <span class="token comment">//     setTimeout(() =&gt; {</span>
    <span class="token comment">//         resolve(&#39;\u7B2C\u4E8C\u6BB5\u6570\u636E&#39;);</span>
    <span class="token comment">//         console.log(&#39;\u7B2C\u4E8C\u6BB5\u6570\u636E\u8BF7\u6C42\u56DE\u6765\u4E86\uFF01\uFF01&#39;);</span>
    <span class="token comment">//     },3000);</span>
    <span class="token comment">// })</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// \u7B2C\u4E8C\u6BB5\u6570\u636E</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u5176\u4ED6\u64CD\u4F5C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div>`,21);function t(e,o){return p}var l=n(a,[["render",t],["__file","JS \u2014 \u671F\u7EA6\u4E0E\u5F02\u6B65\u51FD\u6570.html.vue"]]);export{l as default};
